# Configuration file
# key = value
# Remote Live Coding setup
quarkus.package.type=mutable-jar
quarkus.live-reload.password=changeit
# OpenShift Production Configuration
%prod.quarkus.datasource.reactive.url=postgresql://postgres-database:5432/person
%prod.quarkus.datasource.username=sa
%prod.quarkus.datasource.password=sa
%prod.quarkus.hibernate-orm.database.generation=drop-and-create
%prod.quarkus.hibernate-orm.sql-load-script=import.sql



# The statement quarkus.package.type=mutable-jar shown above in the file application.properties indicates that Quarkus will package the application as a mutable application. A mutable application is one that's capable of being changed and updated in-place, on demand and on a regular basis.
# 	• quarkus.kubernetes.deploy=true - Instructs the extension to deploy to OpenShift after the container image is built.
# 	• quarkus.kubernetes-client.trust-certs=true - Indicates that the application is using self-signed certificates and that the application is to trust the certificates.
# 	• quarkus.kubernetes.deployment-target=openshift - Instructs the extension to generate and create the OpenShift resources, such as DeploymentConfig and Service, after building the container.
# 	• quarkus.openshift.route.expose=true - Instructs the extension to generate an OpenShift Route making the demonstration application accessible from a browser.
# 	• quarkus.kubernetes.annotations."app.openshift.io/connects-to"=postgres-database - Adds a visual connector to show the DB connection in the OpenShift web console topology view.
# 	• quarkus.openshift.env.vars.quarkus-launch-devmode=true - Sets an environment variable in the container to tell Quarkus to launch in dev mode instead of production mode, which is the default when deploying to Kubernetes or OpenShift.
